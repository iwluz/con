import os
import json
import uuid
import asyncio
from datetime import datetime
from aiohttp import web
import socketio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO
sio = socketio.AsyncServer(
    async_mode='aiohttp',
    cors_allowed_origins="*",
    ping_timeout=60,
    ping_interval=25,
    engineio_logger=False
)
app = web.Application()
sio.attach(app)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
users_db = {
    "alice": "pass123",
    "bob": "qwerty"
}
online_users = {}
message_history = {}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è
def generate_message_id():
    return str(uuid.uuid4())[:8]

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def save_message(sender, recipient, text):
    key = f"{min(sender, recipient)}:{max(sender, recipient)}"
    
    if key not in message_history:
        message_history[key] = []
    
    message = {
        'id': generate_message_id(),
        'sender': sender,
        'recipient': recipient,
        'text': text,
        'timestamp': datetime.now().strftime("%H:%M:%S"),
        'status': 'delivered'
    }
    
    message_history[key].append(message)
    return message

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
def get_message_history(user1, user2):
    key = f"{min(user1, user2)}:{max(user1, user2)}"
    return message_history.get(key, [])

# Socket.IO —Å–æ–±—ã—Ç–∏—è
@sio.event
async def connect(sid, environ):
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {sid}")

@sio.event
async def disconnect(sid):
    if sid in online_users:
        username = online_users[sid]
        del online_users[sid]
        await sio.emit('user_offline', username)
        print(f"‚õî –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: {username}")

@sio.event
async def login(sid, data):
    username = data.get('username', '').strip()
    password = data.get('password', '')
    
    if not username or not password:
        return await sio.emit('auth_error', "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", room=sid)
    
    if username not in users_db or users_db[username] != password:
        return await sio.emit('auth_error', "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å", room=sid)
    
    if username in online_users.values():
        return await sio.emit('auth_error', "–£–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ", room=sid)
    
    online_users[sid] = username
    await sio.save_session(sid, {'username': username})
    await sio.emit('auth_success', {'username': username}, room=sid)
    await sio.emit('user_online', username)
    print(f"üîë –í—Ö–æ–¥: {username}")

@sio.event
async def register(sid, data):
    username = data.get('username', '').strip()
    password = data.get('password', '')
    
    if not username or not password:
        return await sio.emit('reg_error', "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", room=sid)
    
    if len(username) < 3:
        return await sio.emit('reg_error', "–ò–º—è > 3 —Å–∏–º–≤–æ–ª–æ–≤", room=sid)
    
    if len(password) < 4:
        return await sio.emit('reg_error', "–ü–∞—Ä–æ–ª—å > 4 —Å–∏–º–≤–æ–ª–æ–≤", room=sid)
    
    if username in users_db:
        return await sio.emit('reg_error', "–ò–º—è –∑–∞–Ω—è—Ç–æ", room=sid)
    
    users_db[username] = password
    await sio.emit('reg_success', "–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω!", room=sid)
    print(f"üÜï –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {username}")

@sio.event
async def get_online_users(sid):
    users = list(online_users.values())
    current_user = (await sio.get_session(sid)).get('username')
    
    if current_user in users:
        users.remove(current_user)
    
    await sio.emit('online_users', users, room=sid)

@sio.event
async def start_typing(sid, data):
    recipient = data.get('recipient')
    sender = (await sio.get_session(sid)).get('username')
    
    if recipient in online_users.values():
        await sio.emit('typing_start', {'sender': sender}, room=sid)

@sio.event
async def stop_typing(sid, data):
    recipient = data.get('recipient')
    sender = (await sio.get_session(sid)).get('username')
    
    if recipient in online_users.values():
        await sio.emit('typing_stop', {'sender': sender}, room=sid)

@sio.event
async def send_message(sid, data):
    recipient = data.get('recipient')
    text = data.get('message', '').strip()
    
    if not recipient or not text:
        return
        
    session = await sio.get_session(sid)
    sender = session.get('username')
    
    if not sender:
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = save_message(sender, recipient, text)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    if recipient in online_users.values():
        await sio.emit('new_message', message, room=sid)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
    await sio.emit('message_sent', {
        'temp_id': data.get('temp_id'),
        'message_id': message['id'],
        'status': 'delivered' if recipient in online_users.values() else 'sent'
    }, room=sid)

@sio.event
async def get_message_history(sid, data):
    contact = data.get('contact')
    session = await sio.get_session(sid)
    username = session.get('username')
    
    if not username or not contact:
        return
        
    history = get_message_history(username, contact)
    await sio.emit('message_history', {
        'contact': contact,
        'messages': history
    }, room=sid)

# –°—Ç–∞—Ç–∏–∫–∞
async def index(request):
    return web.FileResponse('./static/index.html')

app.router.add_get('/', index)
app.router.add_static('/static', path='./static')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
async def health_check(request):
    return web.Response(text="CON Messenger —Ä–∞–±–æ—Ç–∞–µ—Ç!")

app.router.add_get('/health', health_check)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    web.run_app(app, host='0.0.0.0', port=port, access_log=None)